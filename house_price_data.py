# -*- coding: utf-8 -*-
"""House_Price_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YYtcrwwxBdV_tgPS3bd3ZAr_AfpebSZj
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/gdrive')

root_path = 'gdrive/My Drive/housepricedata.csv'

!ls

!cd gdrive

!cd gdrive/My\ Drive

data = pd.read_csv('gdrive/My Drive/housepricedata.csv')

data

dataset = data.values

X = dataset[:, 0:10]
Y = dataset[:, 10]

Y

from sklearn import preprocessing

min_max_scaler = preprocessing.MinMaxScaler()
X_scale = min_max_scaler.fit_transform(X)
X_scale

from sklearn.model_selection import train_test_split

X_train, X_val_and_test, Y_train, Y_val_and_test = train_test_split(X_scale, Y, test_size = 0.3)

X_val, X_test, Y_val, Y_test = train_test_split(X_val_and_test, Y_val_and_test, test_size = 0.5)

print(X_train.shape, X_val.shape, X_test.shape, Y_train.shape, Y_val.shape, Y_test.shape)

from tensorflow.keras.models import Sequential 
import keras
import tensorflow as tf
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras import losses
import numpy as np
from tensorflow.keras.layers import Input, Dense

model = Sequential()
model.add(Dense(32, activation = 'relu', input_shape = (10,)))
model.add(Dense(32, activation = 'relu'))
model.add(Dense(1, activation = 'sigmoid'))

model.compile(optimizer = 'sgd', loss = 'binary_crossentropy', metrics = ['accuracy'])

hist = model.fit(X_train, Y_train, batch_size = 32, epochs = 100, validation_data=(X_val, Y_val))

model.evaluate(X_test, Y_test)[1]

import matplotlib.pyplot as plt

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc = 'upper right')
plt.show()

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc = 'upper right')
plt.show()

model_2 = Sequential([
    Dense(1000, activation='relu', input_shape=(10,)),
    Dense(1000, activation='relu'),
    Dense(1000, activation='relu'),
    Dense(1000, activation='relu'),
    Dense(1, activation='sigmoid'),
])

model_2.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

hist_2 = model_2.fit(X_train, Y_train, batch_size=32, epochs=100, validation_data=(X_val, Y_val))

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc = 'upper right')
plt.show()

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc = 'upper right')
plt.show()

from tensorflow.keras import regularizers

# model_3 = Sequential([
# Dense(1000, activation = 'relu', kernel_regularizer=regularizers.l2(0.01), input_shape = (10,)),
# Dropout(0.3),
# Dense(1000, activation = 'relu', kernel_regularizer=regularizers.l2(0.01)),
# Dropout(0.3),
# Dense(1000, activation = 'relu', kernel_regularizer=regularizers.l2(0.01)),
# Dropout(0.3)
# Dense(1000, activation = 'relu', kernel_regularizer=regularizers.l2(0.01)),
# Dropout(0.3)
# Dense(1, activation = 'sigmoid', kernel_regularizer=regularizers.l2(0.01)),
# ])

model_3 = Sequential([
    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01), input_shape=(10,)),
    Dropout(0.3),
    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),
    Dropout(0.3),
    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),
    Dropout(0.3),
    Dense(1000, activation='relu', kernel_regularizer=regularizers.l2(0.01)),
    Dropout(0.3),
    Dense(1, activation='sigmoid', kernel_regularizer=regularizers.l2(0.01)),
])

model_3.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

hist_3 = model_3.fit(X_train, Y_train, batch_size = 32, epochs = 100, validation_data = (X_val, Y_val))

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc = 'upper right')
plt.show()

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc = 'upper right')
plt.show()

